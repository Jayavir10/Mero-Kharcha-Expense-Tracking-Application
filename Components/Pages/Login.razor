@page "/"

@using Mero_Kharcha.Models;
@using Mero_Kharcha.Services;
@inject IUserServices UserServices;
@inject NavigationManager navigationManager;


<div>
    <h1>Get Started!</h1>
    <form>
        <div class="login-container">
            <div>
                <label>Username:</label>
                <input type="text" @bind="user.UserName" />
            </div>
            <div>
                <label>Password:</label>
                <input type="password" @bind="user.Password" />
            </div>
            <div>
                <label>Confirm Password:</label>
                <input type="password" @bind="confirmPassword" />
            </div>
            <div>
                <label>Choose Currency</label>
                <select @bind="user.Currency">
                    <option value="--">--</option>
                    <option value="NPR">NPR</option>
                    <option value="INR">INR</option>
                    <option value="USD">USD</option>
                </select>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p style="color: red; margin-bottom: 0; font-weight:500;">@errorMessage*</p>
            }
            <button type="button" class="btn-signup" @onclick="RegisterUser">Login</button>
        </div>
    </form>
</div>



@code
{
    private User user = new User();
    private string confirmPassword;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Check if the user already exists when the page is loaded
        var UserAlreadyExists = await UserServices.RetrieveUsersAsync();

        if (UserAlreadyExists.Any())
        {
            // If user exists, navigate to the inflow page
            navigationManager.NavigateTo("/dashboard");
        }
    }


    private async Task RegisterUser()
    {
        if (string.IsNullOrEmpty(user.UserName) || string.IsNullOrEmpty(user.Password) || string.IsNullOrEmpty(confirmPassword) || string.IsNullOrEmpty(user.Currency) || user.Currency == "--")
        {
            errorMessage = "Please fill out all the fields";
            return;
        }

        if (user.Password != confirmPassword)
        {
            errorMessage = "Password and Confirm Password doesn't match";
            return;
        }

        try
        {
            var existingUsers = await UserServices.RetrieveUsersAsync();
            if (existingUsers.Any(u => u.UserName == user.UserName))
            {
                errorMessage = "This username already exists. Please choose another username.";
                return;
            }

            user.Password = HashPassword(user.Password);
            await UserServices.CreateUserAsync(user);

            user = new User();
            errorMessage = null;
            navigationManager.NavigateTo("/dashboard");

        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during registration: {ex.Message}";
        }
    }

    private string HashPassword(string password)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(password);
            var hash = sha256.ComputeHash(bytes);
            return Convert.ToBase64String(hash);
        }
    }
}